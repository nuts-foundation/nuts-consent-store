// Package migrations Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// 1_create_table_consent_rule.down.sql
// 1_create_table_consent_rule.up.sql
// bindata.go
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1_create_table_consent_ruleDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\xf0\xf4\x73\x71\x8d\x50\x28\xcd\xcb\x2c\x8c\x2f\x4a\x2d\xce\x2f\x2d\x4a\x4e\xb5\xe6\x02\xcb\x84\x38\x3a\xf9\xb8\x2a\x60\x15\x4c\xce\xcf\x2b\x4e\xcd\x2b\x89\x2f\x4a\x4d\xce\x2f\x4a\x81\x4a\x21\x99\x54\x90\x58\x92\x09\x92\x87\xaa\x43\xd1\x8b\x21\x07\x08\x00\x00\xff\xff\x30\x52\x84\x4f\x87\x00\x00\x00")

func _1_create_table_consent_ruleDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_create_table_consent_ruleDownSql,
		"1_create_table_consent_rule.down.sql",
	)
}

func _1_create_table_consent_ruleDownSql() (*asset, error) {
	bytes, err := _1_create_table_consent_ruleDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_create_table_consent_rule.down.sql", size: 135, mode: os.FileMode(420), modTime: time.Unix(1568367877, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1_create_table_consent_ruleUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x3f\x4f\xc3\x30\x14\xc4\x77\x7f\x8a\x37\x26\x52\x26\xa4\x4e\x9d\x4c\xfa\x80\x88\xd6\x01\xe3\x20\x3a\x59\xc1\x71\x55\x23\x88\x83\xe3\x20\xf1\xed\x11\xc4\xb4\xcd\x1f\x90\x60\xf6\xbd\xbb\xdf\x9d\x53\x8e\x54\x20\x08\x7a\xbe\x46\x68\x4a\x6f\x74\xed\xa5\xb2\x75\xab\x6b\x0f\x11\x01\x00\x30\x15\x64\x4c\xe0\x25\x72\xb8\xe1\xd9\x86\xf2\x2d\x5c\xe3\x16\x68\x21\xf2\x8c\xa5\x1c\x37\xc8\x44\xf2\xa5\x6c\xbb\xc7\x27\xad\x3c\xdc\x53\x9e\x5e\x51\x1e\x9d\x2d\x16\x31\xb0\x5c\x00\x2b\xd6\xeb\x5e\xa2\xba\xd6\xdb\xca\x94\xf5\x6f\xa2\x52\x79\xeb\xe6\x05\x24\x5e\x12\x12\xa0\x0b\x96\xdd\x16\x08\x19\x5b\xe1\x03\x74\xb5\x79\x95\xe3\x02\x39\x1b\x77\x8a\x02\x63\x72\x24\x49\xfa\xbc\x13\xe3\x7e\x8d\x70\x21\x9d\x56\xd6\x55\x7f\x1e\x63\x14\x2c\x4f\x2e\x39\x5e\x20\x47\x96\xe2\xdd\x04\xcf\x54\x71\x7f\xfe\x56\x3e\x9b\x4a\xee\x9c\x7d\x81\xd5\x27\xd3\x70\xa1\xfe\xd5\xdb\xb9\xb7\xc6\x59\xbb\x93\xfb\xb2\xdd\xcf\x4f\x18\x76\x23\x93\xc2\x4e\xb7\xb6\x73\x4a\x87\xaa\xc3\xfe\x3f\xf0\x0f\x45\x47\xfc\x6f\x2f\xe9\xdf\x1b\xfd\x9f\xaf\x3c\xc0\xe4\xec\x60\x16\x4d\x90\x92\x61\x50\xbc\x24\x1f\x01\x00\x00\xff\xff\xb0\x97\x6e\x72\xd1\x02\x00\x00")

func _1_create_table_consent_ruleUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_create_table_consent_ruleUpSql,
		"1_create_table_consent_rule.up.sql",
	)
}

func _1_create_table_consent_ruleUpSql() (*asset, error) {
	bytes, err := _1_create_table_consent_ruleUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_create_table_consent_rule.up.sql", size: 721, mode: os.FileMode(420), modTime: time.Unix(1568378011, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\xdb\x8e\xdb\xc8\x11\x7d\x26\xbf\xa2\x57\xc0\x1a\x64\xa0\x48\xbc\x5f\x04\x0c\x10\xac\xed\x00\x7e\x88\x37\x88\xbd\x4f\xa9\x60\x40\x36\xbb\x65\x22\x92\x28\x93\xd4\xba\x64\x63\xfe\x3d\x38\x2c\x6a\xac\x59\xef\x8e\xc7\x89\x91\x07\x8e\xc8\x26\xeb\x9c\xba\x1f\xcc\x7a\xad\xfe\x5e\xe9\x7f\x57\x5b\xa3\xf6\xed\xb6\xaf\xc6\xb6\x3b\x0c\xea\x79\xd7\x18\xb5\x35\x07\xd3\x57\xa3\x69\x54\x7d\x56\xdb\xee\xcf\x75\x7b\x68\xaa\xb1\x5a\x29\xef\x2f\xf7\xaf\x7c\xf5\xe2\x67\xf5\xfa\xe7\xb7\xea\xe5\x8b\x57\x6f\x57\xee\x7a\xad\x86\xee\xd4\x6b\x33\x6c\x70\x1f\xde\xea\xde\x54\xa3\xb9\x1d\xab\x7a\x67\x6e\x75\x77\x18\xcc\x61\xbc\xed\x4f\x3b\xb3\x6a\xba\x0f\x87\xd5\xf0\x7e\xf7\xb5\xef\x4e\xc7\xcb\x57\x17\xfe\x6d\xe7\x1e\xbf\x70\xd9\x75\xdb\xfd\xb1\xeb\x47\xe5\xb9\xce\xa2\x3e\x8f\x66\x58\xb8\xce\x42\x77\xfb\x63\x6f\x86\x61\xbd\xfd\xd8\x1e\x71\x60\xf7\x23\x7e\xda\x4e\xfe\xae\xdb\xee\x34\xb6\x3b\x3c\x74\x93\xc1\xb1\x1a\xdf\xad\x6d\xbb\x33\xb8\xc1\xc1\x30\xf6\xed\x61\x3b\xbd\x1b\xdb\xbd\x59\xb8\xbe\xeb\xda\xd3\x41\x5f\xbc\xf9\x87\xa9\x1a\x0f\x37\xea\x9f\xff\x02\xed\x52\x1d\xaa\xbd\x51\x62\xe6\x2b\xef\x72\x6a\xfa\xbe\xeb\x7d\xf5\xc9\x75\xb6\x1f\xa7\x27\xb5\xb9\x51\xf0\x6a\xf5\xda\x7c\x00\x88\xe9\xbd\xc9\x6d\x3c\xff\x74\xb2\xd6\xf4\x13\xac\xef\xbb\x4e\x6b\x27\x83\x1f\x6e\xd4\xa1\xdd\x01\xc2\xe9\xcd\x78\xea\x0f\x78\x5c\x2a\xbb\x1f\x57\x2f\x81\x6e\xbd\x05\x80\xd4\x8f\xef\x37\xea\xc7\x5f\x17\xe2\xc9\xc4\xe5\xbb\xce\x9d\xeb\x3a\xbf\x56\xbd\xaa\x4f\x56\x09\x8f\x90\xb8\xce\xad\xb8\x73\xa3\xda\x6e\xf5\xbc\x3b\x9e\xbd\x67\xf5\xc9\x2e\xd5\xf6\xa3\xef\x3a\x7a\xf7\xf2\xe2\xe9\xea\xf9\xae\x1b\x8c\xe7\xbb\xdf\xcb\x1f\xc0\x08\xfe\x1f\x00\x99\xbe\x17\xbf\xe7\xc3\xfa\x64\x57\x3f\xc1\x75\xcf\x5f\xe2\x0b\xf7\xce\x75\xc7\xf3\xd1\xa8\x6a\x18\xcc\x88\x94\x9f\xf4\x08\x94\x29\xbe\xb9\x1e\xae\xd3\x1e\x6c\xa7\x54\x37\xac\xfe\xda\xee\xcc\xab\x83\xed\xee\xed\xe6\x12\x5e\xce\xaf\x10\xa6\x1a\x2a\x35\x97\xd1\x75\x86\xf6\xe3\xf4\xdc\x1e\xc6\x2c\x71\x9d\x3d\xc6\x43\xdd\x83\xfe\xad\x6b\xcc\x74\xf8\xb6\xdd\x1b\x85\x36\x59\xe1\x0e\x3c\xeb\xb5\x7a\x0d\xac\x39\x04\x74\xd6\x94\x06\xe9\x21\xcf\xb6\xbf\x75\xc2\x9f\xbe\xf7\xfc\x99\x1a\xce\xdc\xdb\xae\x26\x4b\x41\x7d\x03\x8f\xae\x51\xe1\xe2\x23\xa8\xf8\xde\xf3\x25\x80\x87\xa0\x93\xa1\x80\x22\x90\x07\xa0\x08\xf4\x11\x50\x7c\xef\xf9\xd7\x69\x78\x08\x3d\x99\xff\x31\x74\x6b\xcf\x53\xb6\x1e\x67\x40\x2a\x3d\xff\x73\x5a\xbf\xa0\xb8\xca\xf5\xab\xe1\x45\xdb\x3f\xa0\xf9\xf0\xce\x8c\xef\x4c\xaf\x2a\xd5\xb4\xbd\xd1\x63\xd7\x9f\x1f\xa1\x9b\xec\x3d\x5f\xd5\x5d\xb7\xfb\x32\x94\x67\xdd\xb0\x42\x1c\xe0\xf8\xe1\x46\x05\x97\x52\x9c\x87\x07\x94\xed\xa0\x86\xf3\xf0\xb5\xdc\xbd\x39\x0f\x52\x0f\xd3\xdb\x4a\x9b\x4f\x77\x57\x7c\x73\x73\x63\x5e\x6f\x6f\x1f\x59\x8e\x2f\xba\x0f\x87\x37\xef\x77\xea\x66\x6e\x76\x6f\x41\x1c\x5a\xe2\xa2\x26\x0e\x0a\xe2\x20\xf8\xfd\xcb\x5a\xe2\x3c\x22\x0e\x4a\x62\x8b\x5f\x4b\x9c\xe2\x1c\x57\x42\x9c\xc7\xc4\x79\x48\x5c\x34\x72\x1e\x15\xc4\xba\x21\xd6\x35\x71\xa4\x89\x0b\x4d\x1c\x59\xe2\xa4\x22\x8e\x70\x6e\xe4\x19\xf7\x38\x4b\x0c\x71\x9d\x12\x9b\x8c\x38\x88\xc4\xae\x48\x88\xe3\x82\x38\xae\x88\x6d\x49\x5c\x17\xc4\x51\x45\x9c\x05\xc4\x61\x4a\x9c\x68\xc1\xd1\xc0\xa9\x05\x03\x9c\xb8\x2f\xca\xcf\x7c\xc9\x15\x1f\x9e\x8b\x70\xf6\x23\x24\x2e\x4b\xe2\x34\x21\x2e\x03\xe2\xb4\x20\x2e\xe7\x18\xf1\x5b\xe4\xc4\x15\xec\x63\xe2\x26\x94\x1c\xc1\x26\xc8\x1f\xe6\x0a\xb9\xc1\x15\x03\x23\x12\xbf\x13\x2b\xf6\x9f\x73\xb8\xb8\xc8\xc0\x13\xca\x33\xef\xac\xdf\xd3\x82\xcb\x66\xbb\xd2\x12\xd7\x71\x9e\x52\xf3\xa5\xeb\x38\x8b\xa7\xe8\xeb\x62\xe9\x3a\x3e\xba\xe9\xa9\xee\xc2\xd3\x3f\x4d\x2b\xf5\xda\xd3\x69\xa7\xde\x0b\xd7\xd3\xa3\xfe\x9a\x5a\xdc\x2f\xf9\x69\x4d\x6f\x6e\x7e\x3b\x28\x9f\xb0\xf3\x36\xea\x89\xa1\x4e\x5b\x70\xa3\xc2\x38\x5d\x4e\xf3\xb7\xb9\xde\x4d\x5e\x12\x05\xfe\x74\x8e\x8d\xb1\x91\x8d\xf2\xcb\xa1\x65\x2f\x4c\xb3\x22\xce\xf2\x22\xcf\x97\x2a\xf0\xef\x5c\xa7\x82\x27\xcf\xa6\x24\x7c\x9a\x22\xdf\xa8\x39\x01\x70\x73\x33\xfd\xbd\xbb\x2f\x5f\xb5\x7c\xf2\xc4\xfe\x72\xfc\x6f\xe7\xb5\xd4\xc4\x65\x48\x1c\x5b\xe9\x47\x1d\x4b\x8f\x86\x09\xb1\xc6\xcc\xe6\xc4\x39\xb0\x2a\xe2\x38\x27\x8e\x32\xe9\x5f\xfc\x56\x89\xcc\x53\xd9\xc8\x9c\x59\xcc\x4d\x40\x5c\x14\xc4\x0d\x66\x34\x24\x36\x31\x71\x14\xc8\x7c\xa6\x25\xb1\x0e\x65\x07\xa4\x29\x71\x14\xcb\xb7\x45\xfc\xf9\x3b\x0b\x9b\x86\x38\x0c\x85\xbf\x4e\x64\x5e\x11\x0f\xe6\x0f\x73\x6d\x33\xe2\xba\x21\xae\x6b\xe2\xc6\x0a\x7f\x0a\x2c\x23\x73\x0a\x1c\xc4\x9d\x57\xc4\xb5\x21\x4e\x32\xe2\xac\x90\x79\xce\xb0\xa3\x12\xe1\xa8\x52\xe2\x3a\x22\xce\x53\xe2\xaa\x26\xce\x6a\xd9\x59\xe0\x86\xef\xc8\x51\x3c\xef\x91\x2c\x91\x18\x0d\xf6\x56\x2a\x7b\x0e\xbb\xc6\x84\xc4\x4d\x49\x5c\x64\xb2\xf3\xb0\xab\x52\x2d\xf1\x84\x33\x2f\xf6\x01\xde\x61\xbf\x81\x33\xd4\x92\x4b\x0d\x9f\x12\x79\x87\xf3\x4c\x4b\x4c\x1a\x79\xc6\x5e\x69\x88\x63\x4d\xdc\x68\x89\xaf\x44\x7c\xb8\x42\xe2\x70\xce\x3b\xf8\xc0\x13\x87\xc4\x75\x20\xdc\xf0\x1b\xfb\x0d\x35\x30\xb5\xd8\x54\xf0\xb7\x92\xb3\x06\x1c\x15\x71\x09\xee\x54\x72\x82\xf7\xa8\x6b\x5e\x8a\xcd\xb4\x63\x51\xa3\x44\xec\xc3\x48\xae\x0a\xb9\xad\x89\x4b\xe0\xcc\xdc\xc8\x75\x88\x1d\x59\x4b\x3e\x82\x58\x72\x8c\x5d\x0d\xbc\x32\x95\x7c\x60\x67\xc7\x25\x71\x58\x4b\x5f\xa1\xa7\x70\x96\xc5\x92\x4f\x70\x25\xa5\xf4\x51\xad\x89\xc3\xb9\x2f\x72\x23\x9a\x91\x07\xf3\x3e\x46\x8e\x33\x89\x05\x7d\x84\xfe\x44\x3e\x80\x83\xbe\x85\x96\xa0\x97\x23\x23\x7c\xf0\x1f\x3d\x91\xe4\xe2\xb7\x89\xc4\xf7\x20\x11\x5d\x40\xcf\xa0\x27\x81\x63\x8d\x60\xc7\xc8\x6f\x2d\x3d\x63\x8c\xcc\x49\xde\x88\x2e\x34\xa9\xd4\xa7\x89\xc5\xa7\x2a\x14\x3b\x9c\x23\xb7\x35\x74\x08\xf5\xcd\xa4\xe7\x51\xd3\x32\x26\xb6\xb5\xf4\x1b\xb8\xf5\x3c\x6f\x21\xfa\x34\x93\x59\xc0\x37\x3a\x9a\x75\x2e\x27\xae\x33\xd1\xcc\x49\x8f\x66\x9d\xc1\x7c\x82\x0b\xf3\x0a\x5d\x45\xbf\x26\xa9\xc4\x66\xb5\xd4\x12\x1a\x66\x4a\x99\x0d\xe4\xda\x36\xc4\x25\x6a\x6c\xa5\x9f\x74\x40\x6c\x30\x03\x7a\xd6\xc9\x4c\xf4\x0f\xf3\x05\x4d\xcb\x42\xd1\x67\xd4\x00\x35\xc1\xec\x5d\xe6\xe1\x5a\xcb\xd0\x6f\x65\x4e\x9c\x19\xa9\x1f\xf4\x0f\xf5\xfc\x06\x2d\x9b\x16\xd7\xf7\x55\xb2\x09\xf2\xab\x3a\x26\xff\xff\x3d\x5d\xc5\x26\xd4\xff\x55\xc3\xae\xa3\xfd\x7f\x28\xd8\x25\xc8\x59\xbf\xf2\x28\xfc\x76\xfd\xca\x8b\x20\x0c\xbf\x59\xbf\xfe\x13\x00\x00\xff\xff\xb3\x0a\x3e\x2a\x00\x10\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 8192, mode: os.FileMode(420), modTime: time.Unix(1568378016, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1_create_table_consent_rule.down.sql": _1_create_table_consent_ruleDownSql,
	"1_create_table_consent_rule.up.sql":   _1_create_table_consent_ruleUpSql,
	"bindata.go":                           bindataGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"1_create_table_consent_rule.down.sql": &bintree{_1_create_table_consent_ruleDownSql, map[string]*bintree{}},
	"1_create_table_consent_rule.up.sql":   &bintree{_1_create_table_consent_ruleUpSql, map[string]*bintree{}},
	"bindata.go":                           &bintree{bindataGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
