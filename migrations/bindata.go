// Package migrations Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// 1_create_table_consent_rule.down.sql
// 1_create_table_consent_rule.up.sql
// bindata.go
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1_create_table_consent_ruleDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\xf0\xf4\x73\x71\x8d\x50\x28\xcd\xcb\x2c\x8c\x2f\x4a\x2d\xce\x2f\x2d\x4a\x4e\xb5\xe6\x02\xcb\x84\x38\x3a\xf9\xb8\x2a\xa0\x09\xa2\x28\x4f\xce\x2f\x4a\x41\x51\x9c\x9c\x9f\x57\x9c\x9a\x57\x82\x2a\x85\xa4\xa5\x20\xb1\x24\x13\x24\x0f\x55\x87\xa2\x17\x43\x0e\x10\x00\x00\xff\xff\x55\xac\xed\x91\x9f\x00\x00\x00")

func _1_create_table_consent_ruleDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_create_table_consent_ruleDownSql,
		"1_create_table_consent_rule.down.sql",
	)
}

func _1_create_table_consent_ruleDownSql() (*asset, error) {
	bytes, err := _1_create_table_consent_ruleDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_create_table_consent_rule.down.sql", size: 159, mode: os.FileMode(420), modTime: time.Unix(1568619865, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1_create_table_consent_ruleUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\xc1\x4e\x83\x40\x10\x86\xef\x3c\xc5\x1c\x21\xe1\x64\xd2\x53\x4f\x2b\x4c\x2b\x91\x0e\xba\x5d\x8c\x3d\x6d\x10\xd6\x14\xa3\x6c\x85\xc5\xc4\xb7\x37\xed\x6e\x6d\x81\x5a\xcf\xfb\xcd\xcc\xff\x7f\x10\x71\x64\x02\x41\xb0\xdb\x14\x61\x57\x98\x5a\x35\x46\x96\xba\xe9\x54\x63\xc0\xf7\x00\x00\xea\x0a\x9e\x18\x8f\xee\x18\xf7\x6f\x66\xb3\x00\x1e\x78\xb2\x62\x7c\x03\xf7\xb8\x09\x0f\x40\xd7\xbf\xbc\xa9\xd2\x0c\x29\xca\x04\x50\x9e\xa6\x16\x29\xfb\xce\xe8\xaa\x2e\x9a\x6b\x50\x51\x1a\xdd\x5e\x06\xbc\x60\xee\x79\x2e\x6b\x4e\xc9\x63\x8e\x90\x50\x8c\xcf\xd0\x37\xf5\xa7\x1c\xe7\xce\x68\x5c\xc5\x77\x19\xc3\x53\x92\xd0\xde\x3b\x5b\x6c\x25\xb8\x09\xd9\xaa\x52\xb7\xd5\xc9\x41\x42\x02\x97\xc8\xcf\xeb\x03\xcb\x45\x96\x50\xc4\x71\x85\x24\x6c\x89\xd1\x61\x39\xb6\xc7\x71\x81\x1c\x29\xc2\xf5\x24\x63\x5d\x05\x76\xc7\x57\xf1\x5e\x57\xf2\xb5\xd5\x1f\x10\xef\x83\x0d\x35\xd9\x57\xa3\x2f\xbd\x6d\x8b\x6e\x7b\xd9\xa0\xd3\x76\x5d\xa4\xeb\x9c\xd1\xc8\x82\xbf\xdf\x3b\x31\xd5\xaa\x4e\xf7\x6d\xa9\x9c\xa3\xe1\x88\x3c\x29\xb3\xd1\x8e\xb4\x34\xdf\x3b\xf5\xd7\x6f\x70\x20\x17\x19\xc7\x64\x49\x7b\xc3\xfe\x64\x69\x70\x40\xce\x2c\x8e\xbf\xd7\x11\xc9\x08\x62\x4c\x51\x20\x44\x6c\x1d\xb1\xf8\xdf\xea\xae\x4c\x46\xbf\x51\xa7\xd7\xc3\x61\x8d\x60\xee\xfd\x04\x00\x00\xff\xff\x0c\xfe\xad\x26\x41\x03\x00\x00")

func _1_create_table_consent_ruleUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_create_table_consent_ruleUpSql,
		"1_create_table_consent_rule.up.sql",
	)
}

func _1_create_table_consent_ruleUpSql() (*asset, error) {
	bytes, err := _1_create_table_consent_ruleUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_create_table_consent_rule.up.sql", size: 833, mode: os.FileMode(420), modTime: time.Unix(1568719269, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\xdd\x6e\xdb\x48\xd2\xbd\x26\x9f\xa2\x47\xc0\x04\xe4\x07\x7f\x32\xff\x7f\x04\x18\x58\x4c\x92\x05\x72\xb1\x99\xc5\x26\x73\xb5\xb5\x30\x9a\x64\xb7\x43\xac\x2c\x2a\x24\x35\x29\x25\xf0\xbb\x2f\x4e\x17\x65\xcb\xc9\x8c\xe3\xdd\x99\x0b\x59\x64\xab\xfa\xd4\xa9\xaa\x53\x55\xc9\xe5\xa5\xfa\xbb\x6e\xff\xad\x6f\x8c\xba\xed\x6f\x46\x3d\xf7\xc3\x6e\x52\x2f\x87\xce\xa8\x1b\xb3\x33\xa3\x9e\x4d\xa7\x9a\xa3\xba\x19\xfe\xbf\xe9\x77\x9d\x9e\xf5\x5a\x05\x7f\xb9\xff\x29\x54\xaf\x7e\x56\x6f\x7f\x7e\xaf\x5e\xbf\x7a\xf3\x7e\xed\x5f\x5e\xaa\x69\x38\x8c\xad\x99\x36\x78\x8e\xaf\xdb\xd1\xe8\xd9\x5c\xcf\xba\xd9\x9a\xeb\x76\xd8\x4d\x66\x37\x5f\x8f\x87\xad\x59\x77\xc3\xa7\xdd\x7a\xfa\xb8\xfd\x9e\xdd\x61\x7f\xb2\x3a\xf9\xbf\x19\xfc\xfd\x37\x94\x7d\xbf\xbf\xdd\x0f\xe3\xac\x02\xdf\x5b\x35\xc7\xd9\x4c\x2b\xdf\x5b\xb5\xc3\xed\x7e\x34\xd3\x74\x79\xf3\xb9\xdf\xe3\xc0\xde\xce\xf8\xea\x07\xf9\x7b\xd9\x0f\x87\xb9\xdf\xe2\x65\x70\x17\xf6\x7a\xfe\x70\x69\xfb\xad\xc1\x03\x0e\xa6\x79\xec\x77\x37\xee\xb7\xb9\xbf\x35\x2b\x3f\xf4\x7d\x7b\xd8\xb5\x27\x36\xff\x30\xba\x0b\xf0\xa0\xfe\xf9\x2f\xb8\xbd\x50\x3b\x7d\x6b\x94\x5c\x0b\x55\x70\x3a\x35\xe3\x38\x8c\xa1\xfa\xe2\x7b\x37\x9f\xdd\x9b\xda\x5c\x29\xb0\x5a\xbf\x35\x9f\x00\x62\xc6\xc0\xd1\xc6\xfb\x4f\x07\x6b\xcd\xe8\x60\xc3\xd0\xf7\x7a\xeb\x2e\xfc\x70\xa5\x76\xfd\x16\x10\xde\x68\xe6\xc3\xb8\xc3\xeb\x85\xb2\xb7\xf3\xfa\x35\xd0\x6d\xb0\x02\x90\xfa\xf1\xe3\x46\xfd\xf8\xeb\x4a\x98\x38\x5f\xa1\xef\xdd\xf9\xbe\xf7\xab\x1e\x55\x73\xb0\x4a\xfc\x88\x13\xdf\xbb\x16\x3a\x57\xaa\x1f\xd6\x2f\x87\xfd\x31\x78\xd1\x1c\xec\x85\xba\xf9\x1c\xfa\x5e\xbb\x7d\x7d\x62\xba\x7e\xb9\x1d\x26\x13\x84\xfe\x9f\xc5\x07\x30\x82\xff\x3b\x40\x66\x1c\x85\xf7\x72\xd8\x1c\xec\xfa\x27\x50\x0f\xc2\x0b\x58\xf8\x77\xbe\x3f\x1f\xf7\x46\xe9\x69\x32\x33\x52\x7e\x68\x67\xa0\xb8\xf8\x96\x7a\xf8\x5e\xbf\xb3\x83\x52\xc3\xb4\xfe\x6b\xbf\x35\x6f\x76\x76\xb8\xbf\xb7\x94\xf0\x74\x7e\x86\xe0\x6a\xa8\xd4\x52\x46\xdf\x9b\xfa\xcf\xee\xbd\xdf\xcd\x45\xe6\x7b\xb7\x68\x0f\x75\x0f\xfa\xb7\xa1\x33\xee\xf0\x7d\x7f\x6b\x14\x64\xb2\xc6\x13\xfc\x5c\x5e\xaa\xb7\xc0\x5a\x42\x80\xb2\x5c\x1a\x44\x43\x81\xed\xbf\x26\x11\x3a\xfb\x20\x5c\x5c\x83\xcc\xfd\xdd\xb5\xbb\x29\xa8\xef\xc0\xe8\x1c\x15\x14\x9f\x40\x85\x7d\x10\x4a\x00\x8f\x41\xdd\x45\x01\x45\x20\x8f\x40\x11\xe8\x13\xa0\xb0\x0f\xc2\xf3\x34\x3c\x86\x76\xd7\x7f\x1f\xba\xb7\x47\x97\xad\xa7\x3d\x20\x95\x41\xf8\x90\xd6\x6f\x5c\x9c\xe5\xfa\xcd\xf4\xaa\x1f\x1f\xb9\xf9\xf4\xc1\xcc\x1f\xcc\xa8\xb4\xea\xfa\xd1\xb4\xf3\x30\x1e\x9f\x70\xe7\xee\x07\xa1\x6a\x86\x61\xfb\x6d\x28\x2f\x86\x69\x8d\x38\xe0\xe3\x87\x2b\x15\x9d\x4a\x71\x9c\x1e\xb9\xec\x27\x35\x1d\xa7\xef\xe5\xee\xdd\x71\x92\x7a\x98\xd1\xea\xd6\x7c\xb9\x3b\xf3\xb7\x88\x1b\xfd\x7a\x7d\xfd\xc4\x70\x7c\x35\x7c\xda\xbd\xfb\xb8\x55\x57\x8b\xd8\x83\x15\x71\x6c\x89\xab\x86\x38\xaa\x88\xa3\xe8\xb7\x3f\xd6\x12\x97\x09\x71\x54\x13\x5b\x7c\x5b\xe2\x1c\xe7\xf8\x64\xc4\x65\x4a\x5c\xc6\xc4\x55\x27\xe7\x49\x45\xdc\x76\xc4\x6d\x43\x9c\xb4\xc4\x55\x4b\x9c\x58\xe2\x4c\x13\x27\x38\x37\xf2\x8e\x67\x9c\x65\x86\xb8\xc9\x89\x4d\x41\x1c\x25\x72\xaf\xca\x88\xd3\x8a\x38\xd5\xc4\xb6\x26\x6e\x2a\xe2\x44\x13\xeb\x48\x78\xe8\x44\xfc\x64\xf6\x01\xcf\x61\xc5\xc4\x79\x4c\x5c\xb7\xcb\x07\x5c\xcb\xe5\x59\xcb\x73\x95\x08\x56\x95\x13\xeb\x8c\x58\xe7\xc4\x49\x44\xdc\xc4\xc4\x49\x46\x1c\xa7\xf2\xed\xe2\xcc\x89\xab\x52\xfc\xc5\x25\x71\x96\x12\x47\x86\x38\xfe\x2a\x3f\x76\xb1\xd5\x2d\xb1\xe9\x88\xeb\x58\x7c\x3f\xe4\x71\x75\x5a\x05\xcf\x28\xd1\x32\xb7\x7e\x6b\x1f\x9c\xa6\xdb\xd9\x3e\xf1\x3d\xef\x39\x75\xbf\xf0\x3d\x6f\xf5\x9c\x1d\xbb\xba\xf0\xbd\x10\x8a\x7a\x2e\x5d\x30\xfd\x3f\x37\x56\xcf\x99\xba\xb9\x7a\xbf\xbc\x9e\x1f\xf5\xf7\x36\xc6\xfd\xa0\x77\xa3\x7a\x73\xf5\x75\xb3\x7c\xc1\xdc\xdb\xa8\x67\x86\xea\x26\xe1\x46\xc5\x79\x7d\xe1\x7a\x70\x73\x3e\x9f\x82\x2c\x89\x42\x77\x8e\xa9\xb1\x91\xa9\xf2\xcb\xae\xe7\x20\xce\x8b\xaa\x88\xeb\xaa\xc8\x2f\x54\x14\xde\xf9\x9e\x06\x93\x17\x2e\x09\x5f\x5c\xe4\x1b\xb5\x24\x00\x34\x37\xee\xef\xdd\x7d\xf9\xf4\xc5\xb3\xbb\xf6\x97\xfd\xff\xda\xb3\xe8\xa1\x1a\xfd\x14\x4b\x8f\x55\x29\x71\x16\x89\x76\xab\x82\xd8\x58\xe2\xb4\x25\x6e\x73\xe2\x18\x3d\x1a\x13\x9b\x98\xb8\xc8\x88\xbb\x84\x38\x4f\xa5\xbf\x92\x86\x38\x6b\xe5\x1b\xba\x86\xfe\x1b\xf4\x52\x27\xbd\x9d\x76\xc4\x45\x27\xb8\x5d\x41\x1c\xa3\xa7\x52\xe2\xa2\x95\x1e\x03\x7e\x9b\x11\x37\x25\x71\x5a\x4a\x7f\x14\x46\xee\x54\xe8\x57\x4d\xdc\xa2\x87\x9a\x65\x6e\xb4\xcb\xcc\xb1\x82\x59\x2e\x9c\x30\x1b\xd0\xdf\x0d\xfc\x34\xe2\xa7\x88\x97\xfe\xae\x04\x27\xcd\x89\xb3\x82\xb8\x2e\x84\xa3\xa9\x89\x73\xd8\xa5\xc4\x2d\xf2\x52\x3e\xe4\xc8\x68\xe2\x48\x13\xd7\xe8\xe7\x8a\xb8\xb2\xc4\x66\x79\x86\x5d\x61\x89\x0b\xe0\xa4\x62\x1f\x1b\xe2\xb2\x22\x6e\x12\xe2\x22\x21\x2e\x5b\xe2\x28\x15\x5b\xcc\x27\xcc\x25\xcc\x0c\xe4\xb8\xc3\x99\x25\x6e\x5a\x62\x5d\x4b\x3e\x23\xe4\xb0\x26\x6e\xe1\x37\x93\x59\x09\xdf\x1a\x39\x2b\xe4\x37\x97\x03\x43\x6c\x2a\x62\x8d\x79\x69\x64\x6e\x15\x8d\xd8\x63\xb6\xc5\x9a\xb8\xc3\xac\x35\xc4\x51\x21\x3e\x8a\x48\xb8\x97\xb5\xdc\x81\x3d\x6a\xde\xd6\x12\x7b\x05\x9c\x48\x30\x50\x33\xe4\xbb\x8b\xa4\x1e\x16\x73\xab\x14\x0d\x98\x52\xfc\x17\xc8\xe7\xa2\x8d\x12\xbf\x81\x77\x2a\x9a\x80\xa6\x70\xb7\x33\xc4\x29\x78\x35\x52\xeb\x24\x7f\xc8\x43\x57\x0b\xff\x3c\x91\xba\x77\xb9\x70\x41\xfd\xb2\x44\x6a\x59\xc3\x57\x25\x5c\x4c\x23\xb9\xc4\xec\xcf\x72\xa9\x1f\xb8\x42\x37\x6e\xb7\xe4\x32\x93\x9d\xa6\x80\x1f\x4b\xed\x53\xec\x86\x82\xb8\x2d\x17\xbb\x78\xd1\x32\xf8\x26\x12\x5b\xb2\xd4\x1f\x7a\x8d\x10\xcf\x62\x0f\xdd\xd8\x58\xf2\xe8\x9e\x13\xd9\x43\xe0\x1a\x2f\xda\x43\x8f\xa0\x6f\xa2\x4e\xb4\x85\xb8\x60\x0b\x7d\x63\xe7\x34\x8b\xf6\xd1\x8f\xd0\x74\xd9\x2c\xb1\x23\x3f\xa9\xf8\x82\x5f\xec\x19\xc4\x88\x3d\x04\xee\x88\x1b\x7b\x08\x1a\xe9\xac\xe4\x31\x8d\xc5\xb7\x5e\x76\xa2\xd3\x60\x27\xfa\xc1\x3d\xf8\x44\x7f\x56\x95\xf4\x2d\x62\x84\x36\x81\x87\xfa\x36\xd8\x99\xd9\x03\x1e\x62\xef\x16\x1d\x97\x91\xec\xb8\xf8\x54\xcb\x52\x7a\x2a\xab\x85\x33\x6a\x6b\x8d\x9c\x15\xb5\xd8\x43\xc7\x6e\xb7\xb6\x0b\xbe\x15\xbc\x38\x96\x5a\x62\xfe\xa0\x0f\x30\x1b\xa0\x4b\xe0\x67\x4b\x8d\xe2\x4e\xf6\xa9\xad\x84\x0f\x7a\x4d\x1b\xb1\x45\x7f\x02\x0b\x77\xa0\x3b\x60\xc2\x7f\xb1\xfc\x1b\xe2\xa4\x65\xdb\x49\x9f\x7c\xbd\x67\xd1\x47\xe0\xaa\x3b\xe2\xa4\x10\x4d\x45\xe9\x7f\xb5\x67\xdd\x50\xfd\x73\xb7\xac\x83\xfc\xee\x8e\x95\xff\x9f\x3e\x7f\xc3\x3a\xd4\x3f\xba\x5f\xcf\xa3\xfd\x63\xdb\xf5\x3f\x01\x00\x00\xff\xff\x4d\xda\xb6\xa1\x00\x10\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 8192, mode: os.FileMode(420), modTime: time.Unix(1568719275, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1_create_table_consent_rule.down.sql": _1_create_table_consent_ruleDownSql,
	"1_create_table_consent_rule.up.sql":   _1_create_table_consent_ruleUpSql,
	"bindata.go":                           bindataGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"1_create_table_consent_rule.down.sql": &bintree{_1_create_table_consent_ruleDownSql, map[string]*bintree{}},
	"1_create_table_consent_rule.up.sql":   &bintree{_1_create_table_consent_ruleUpSql, map[string]*bintree{}},
	"bindata.go":                           &bintree{bindataGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
