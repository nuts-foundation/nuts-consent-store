// Package migrations Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// 1_create_table_consent_rule.down.sql
// 1_create_table_consent_rule.up.sql
// 2_alter_consent_record_add_version_uuid.down.sql
// 2_alter_consent_record_add_version_uuid.up.sql
// bindata.go
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1_create_table_consent_ruleDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\xf0\xf4\x73\x71\x8d\x50\x28\xcd\xcb\x2c\x8c\x2f\x4a\x2d\xce\x2f\x2d\x4a\x4e\xb5\xe6\x02\xcb\x84\x38\x3a\xf9\xb8\x2a\xa0\x09\xa2\x28\x4f\xce\x2f\x4a\x41\x51\x9c\x9c\x9f\x57\x9c\x9a\x57\x82\x2a\x85\xa4\xa5\x20\xb1\x24\x13\x24\x0f\x55\x87\xa2\x17\x43\x0e\x10\x00\x00\xff\xff\x55\xac\xed\x91\x9f\x00\x00\x00")

func _1_create_table_consent_ruleDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_create_table_consent_ruleDownSql,
		"1_create_table_consent_rule.down.sql",
	)
}

func _1_create_table_consent_ruleDownSql() (*asset, error) {
	bytes, err := _1_create_table_consent_ruleDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_create_table_consent_rule.down.sql", size: 159, mode: os.FileMode(420), modTime: time.Unix(1571041100, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1_create_table_consent_ruleUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x92\xc1\x4e\x83\x40\x10\x86\xef\x3c\xc5\x1c\x21\xe1\x64\xd2\x53\x4f\x2b\x4c\x2b\x91\x0e\xba\x5d\x8c\x3d\x6d\x10\xd6\x14\xa3\x6c\x85\xc5\xc4\xb7\x37\xed\x6e\x6d\x81\x5a\xcf\xfb\xcd\xcc\xff\x7f\x10\x71\x64\x02\x41\xb0\xdb\x14\x61\x57\x98\x5a\x35\x46\x96\xba\xe9\x54\x63\xc0\xf7\x00\x00\xea\x0a\x9e\x18\x8f\xee\x18\xf7\x6f\x66\xb3\x00\x1e\x78\xb2\x62\x7c\x03\xf7\xb8\x09\x0f\x40\xd7\xbf\xbc\xa9\xd2\x0c\x29\xca\x04\x50\x9e\xa6\x16\x29\xfb\xce\xe8\xaa\x2e\x9a\x6b\x50\x51\x1a\xdd\x5e\x06\xbc\x60\xee\x79\x2e\x6b\x4e\xc9\x63\x8e\x90\x50\x8c\xcf\xd0\x37\xf5\xa7\x1c\xe7\xce\x68\x5c\xc5\x77\x19\xc3\x53\x92\xd0\xde\x3b\x5b\x6c\x25\xb8\x09\xd9\xaa\x52\xb7\xd5\xc9\x41\x42\x02\x97\xc8\xcf\xeb\x03\xcb\x45\x96\x50\xc4\x71\x85\x24\x6c\x89\xd1\x61\x39\xb6\xc7\x71\x81\x1c\x29\xc2\xf5\x24\x63\x5d\x05\x76\xc7\x57\xf1\x5e\x57\xf2\xb5\xd5\x1f\x10\xef\x83\x0d\x35\xd9\x57\xa3\x2f\xbd\x6d\x8b\x6e\x7b\xd9\xa0\xd3\x76\x5d\xa4\xeb\x9c\xd1\xc8\x82\xbf\xdf\x3b\x31\xd5\xaa\x4e\xf7\x6d\xa9\x9c\xa3\xe1\x88\x3c\x29\xb3\xd1\x8e\xb4\x34\xdf\x3b\xf5\xd7\x6f\x70\x20\x17\x19\xc7\x64\x49\x7b\xc3\xfe\x64\x69\x70\x40\xce\x2c\x8e\xbf\xd7\x11\xc9\x08\x62\x4c\x51\x20\x44\x6c\x1d\xb1\xf8\xdf\xea\xae\x4c\x46\xbf\x51\xa7\xd7\xc3\x61\x8d\x60\xee\xfd\x04\x00\x00\xff\xff\x0c\xfe\xad\x26\x41\x03\x00\x00")

func _1_create_table_consent_ruleUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_create_table_consent_ruleUpSql,
		"1_create_table_consent_rule.up.sql",
	)
}

func _1_create_table_consent_ruleUpSql() (*asset, error) {
	bytes, err := _1_create_table_consent_ruleUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_create_table_consent_rule.up.sql", size: 833, mode: os.FileMode(420), modTime: time.Unix(1571041100, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __2_alter_consent_record_add_version_uuidDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x41\x4f\x83\x40\x10\x85\xef\xfb\x2b\xde\x11\x12\x4e\x26\x3d\x71\x5a\x61\xaa\x1b\x61\xa9\xc3\x62\xec\x89\x90\x2e\xa6\x9b\x58\xa8\x80\xfd\xfd\x06\x6a\x4d\x25\x7b\xfe\xde\xcc\xbc\xf7\x26\xe5\x62\x07\xa5\x53\x7a\xc7\x77\xe7\xbe\xea\xa1\x3d\xf4\x83\xad\x2f\xed\x30\xba\xbe\x8b\x85\x90\x99\x21\x86\x91\x8f\x19\xe1\xd0\x77\x63\xdb\x4d\xbf\x22\x30\x69\x99\x13\x4c\xb1\x02\xf5\x74\x3a\xc7\x42\x24\x4c\xd2\x90\x7f\x34\x10\x00\xe0\x2c\x94\x36\xf4\x44\x8c\x1d\xab\x5c\xf2\x1e\x2f\xb4\x87\xac\x4c\xa1\x74\xc2\x94\x93\x36\xd1\xa2\x3c\x37\x93\x9b\xc7\x6f\x6b\x9c\xc5\x9b\xe4\xe4\x59\x72\xf0\xb0\xd9\x84\x60\xda\x12\x93\x4e\xa8\x5c\x4b\x03\x67\xc3\xeb\x8e\x4b\xf3\xe9\x6c\xfd\x31\xf4\x27\xa4\xb3\x31\x5d\x18\xe8\x2a\xcb\xee\xe9\xd4\xfb\xd8\xb1\x19\x8f\xff\xef\xdd\x38\x2a\xad\x5e\x2b\x12\x61\x2c\x84\xd2\x25\xb1\x99\x13\xad\x0b\x41\x49\x19\x25\x06\x81\xb3\x91\x27\x4a\x74\x67\x2d\xfa\x33\x12\x2d\x67\x43\x6c\xb9\xc8\xfd\x05\x2f\xbf\xf3\xd5\x7b\xe5\x3f\x01\x00\x00\xff\xff\xeb\xc2\xc4\xdc\xdb\x01\x00\x00")

func _2_alter_consent_record_add_version_uuidDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__2_alter_consent_record_add_version_uuidDownSql,
		"2_alter_consent_record_add_version_uuid.down.sql",
	)
}

func _2_alter_consent_record_add_version_uuidDownSql() (*asset, error) {
	bytes, err := _2_alter_consent_record_add_version_uuidDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "2_alter_consent_record_add_version_uuid.down.sql", size: 475, mode: os.FileMode(420), modTime: time.Unix(1573476094, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __2_alter_consent_record_add_version_uuidUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\x31\x8b\x84\x30\x10\x85\x7b\x7f\xc5\x94\x0a\x36\x77\x60\x65\x35\x67\xe6\xee\x84\x6c\x64\x43\xb2\x6c\x27\xa2\x01\xd3\x24\x6e\x62\xfc\xfd\xcb\x2e\x6b\x63\x65\x39\x03\xef\x7b\xdf\x43\xae\x48\x82\xc2\x1f\x4e\x30\x7a\x17\x8d\x5b\xfb\x60\x46\x1f\x26\x40\xc6\xa0\xe9\xb8\xbe\x08\xd8\x4c\x88\xd6\x3b\x68\x85\xa2\x3f\x92\xc0\xe8\x17\x35\x57\xf0\x55\x67\xe7\x00\x29\xd9\x09\x6e\x28\x9b\x7f\x94\xf9\x77\x55\x15\x67\x83\x4b\x30\x9b\xf5\x29\xf6\xf3\x10\xe7\x03\x21\x6b\x24\xa1\x22\xd0\xa2\xbd\x6a\x82\x56\x30\xba\x43\x72\xf6\xf1\xe1\xf4\xbb\x76\x27\x0e\x0d\xf9\x32\xac\xf6\x75\xee\x6f\x3b\x95\x6f\xc7\x72\x9f\x5a\xd4\xcf\x00\x00\x00\xff\xff\x52\x46\xc5\x47\x1a\x01\x00\x00")

func _2_alter_consent_record_add_version_uuidUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__2_alter_consent_record_add_version_uuidUpSql,
		"2_alter_consent_record_add_version_uuid.up.sql",
	)
}

func _2_alter_consent_record_add_version_uuidUpSql() (*asset, error) {
	bytes, err := _2_alter_consent_record_add_version_uuidUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "2_alter_consent_record_add_version_uuid.up.sql", size: 282, mode: os.FileMode(420), modTime: time.Unix(1573546518, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x5b\x8f\xdb\xc8\xd1\x7d\x26\x7f\x45\xaf\x80\x35\xc8\x0f\xf3\x49\xbc\x89\xa4\x04\x0c\x10\xac\xed\x00\x7e\x88\x37\x88\xbd\x4f\xa9\x40\x68\x92\xdd\x32\x11\x49\x94\x49\xca\x2e\xd9\x98\xff\x1e\x9c\x2e\x6a\x2e\xf6\xee\x58\x09\xf6\x41\xc3\x66\xb3\xea\xd4\xa9\xbb\xbd\x58\xa8\xbf\xeb\xfa\xdf\x7a\x6b\xd4\xbe\xdd\xf6\x7a\x6c\xbb\xc3\xa0\x5e\x76\x8d\x51\x5b\x73\x30\xbd\x1e\x4d\xa3\xaa\xb3\xda\x76\xff\x5f\xb5\x87\x46\x8f\x7a\xae\x82\xbf\xdc\x7f\x0a\xd5\xab\x5f\xd5\xdb\x5f\xdf\xab\xd7\xaf\xde\xbc\x9f\xfb\x8b\x85\x1a\xba\x53\x5f\x9b\x61\x8d\x73\xbc\xa9\x7b\xa3\x47\xb3\x19\x75\xb5\x33\x9b\xba\x3b\x0c\xe6\x30\x6e\xfa\xd3\xce\xcc\x9b\xee\xf3\x61\x3e\x7c\xdc\xfd\x48\xee\x74\xbc\x48\x25\x1b\xbd\x1b\x4d\xff\xf0\xd9\xd4\x5d\xdf\x6c\x74\xd3\x6c\x3e\x99\x7e\x68\xbb\xc3\xe6\x74\x6a\x9b\x27\xc8\xd7\xea\x3c\x58\xb9\x78\xb9\xed\xfc\xe3\x77\x81\xf1\xfd\x76\x7f\xec\xfa\x51\x05\xbe\x37\xab\xce\xa3\x19\x66\xbe\x37\xab\xbb\xfd\xb1\x37\xc3\xb0\xd8\x7e\x69\x8f\xb8\xb0\xfb\x11\x8f\xb6\x93\xbf\x8b\xb6\x3b\x8d\xed\x0e\x2f\x9d\x53\x38\xea\xf1\xc3\xc2\xb6\x3b\x83\x03\x2e\x86\xb1\x6f\x0f\x5b\xf7\x6d\x6c\xf7\x66\xe6\x87\xbe\x6f\x4f\x87\xfa\xc2\xe6\x1f\x46\x37\x01\x0e\xea\x9f\xff\x82\xd9\x1b\x75\xd0\x7b\xa3\x44\x2d\x54\xc1\xe5\xd6\xf4\x7d\xd7\x87\xea\xab\xef\x6d\xbf\xb8\x37\xb5\xbe\x55\x60\x35\x7f\x6b\x3e\x03\xc4\xf4\x81\xa3\x8d\xf7\x5f\x4e\xd6\x9a\xde\xc1\x86\xa1\xef\xb5\xd6\x29\xfc\x74\xab\x0e\xed\x0e\x10\x5e\x6f\xc6\x53\x7f\xc0\xeb\x8d\xb2\xfb\x71\xfe\x1a\xe8\x36\x98\x01\x48\xfd\xfc\x71\xad\x7e\xfe\x34\x13\x26\xce\x56\xe8\x7b\x77\xbe\xef\x7d\xd2\xbd\xaa\x4e\x56\x89\x1d\x31\xe2\x7b\x1b\xa1\x73\xab\xda\x6e\xfe\xb2\x3b\x9e\x83\x17\xd5\xc9\xde\xa8\xed\x97\xd0\xf7\xea\xdd\xeb\x0b\xd3\xf9\xcb\x5d\x37\x98\x20\xf4\xff\x2c\x3e\x80\x11\xfc\x3f\x00\x32\x7d\x2f\xbc\xa7\xcb\xea\x64\xe7\xbf\x80\x7a\x10\xde\x40\xc2\xbf\xf3\xfd\xf1\x7c\x34\x4a\x0f\x83\x19\x11\xf2\x53\x3d\x02\xc5\xf9\x37\xe5\xc3\xf7\xda\x83\xed\x94\xea\x86\xf9\x5f\xdb\x9d\x79\x73\xb0\xdd\xbd\xde\x94\xc2\xcb\xfd\x23\x04\x97\x43\xa5\xa6\x34\xfa\xde\xd0\x7e\x71\xef\xed\x61\xcc\x33\xdf\xdb\xa3\x09\xd5\x3d\xe8\xdf\xba\xc6\xb8\xcb\xf7\xed\xde\x28\x94\xc9\x1c\x27\xd8\x59\x2c\xd4\x5b\x60\x4d\x2e\xa0\xb2\x5c\x18\xa4\x86\x02\xdb\x7e\x4b\x22\x74\xf2\x41\x38\x99\x06\x99\x7b\xdd\xb9\xd3\x14\xd4\x77\x60\xf4\x18\x15\x14\x9f\x41\x85\x7c\x10\x8a\x03\x4f\x41\x9d\xa2\x80\xc2\x91\x27\xa0\x70\xf4\x19\x50\xc8\x07\xe1\xe3\x30\x3c\x85\x76\xea\x7f\x0c\xdd\xda\xb3\x8b\xd6\xf3\x16\x10\xca\x20\x7c\x08\xeb\x77\x26\x1e\xc5\xfa\xcd\xf0\xaa\xed\x9f\x98\xf9\xfc\xc1\x8c\x1f\x4c\xaf\xb4\x6a\xda\xde\xd4\x63\xd7\x9f\x9f\x31\xe7\xf4\x83\x50\x55\x5d\xb7\xfb\xde\x95\x17\xdd\x30\x87\x1f\xb0\xf1\xd3\xad\x8a\x2e\xa9\x38\x0f\x4f\x4c\xb6\x83\x1a\xce\xc3\x8f\x62\xf7\xee\x3c\x48\x3e\x4c\x6f\x75\x6d\xbe\xde\x3d\xb2\x37\x15\x37\xfa\x75\xb3\x79\x66\x04\xbf\xea\x3e\x1f\xde\x7d\xdc\xa9\xdb\xa9\xd8\x83\x19\x71\x6c\x89\xcb\x8a\x38\x2a\x89\xa3\xe8\xf7\x7f\xd6\x12\x17\x09\x71\xb4\x22\xb6\x78\x5a\xe2\x25\xee\xf1\xcb\x88\x8b\x94\xb8\x88\x89\xcb\x46\xee\x93\x92\xb8\x6e\x88\xeb\x8a\x38\xa9\x89\xcb\x9a\x38\xb1\xc4\x99\x26\x4e\x70\x6f\xe4\x1d\x67\xdc\x65\x86\xb8\x5a\x12\x9b\x9c\x38\x4a\x44\xaf\xcc\x88\xd3\x92\x38\xd5\xc4\x76\x45\x5c\x95\xc4\x89\x26\xd6\x91\xf0\xd0\x89\xd8\xc9\xec\x03\x9e\xc3\x8a\x89\x97\x31\xf1\xaa\x9e\x7e\xe0\x5a\x4c\x67\x2d\xe7\x32\x11\xac\x72\x49\xac\x33\x62\xbd\x24\x4e\x22\xe2\x2a\x26\x4e\x32\xe2\x38\x95\xa7\xf3\x73\x49\x5c\x16\x62\x2f\x2e\x88\xb3\x94\x38\x32\xc4\xf1\x37\xf1\xb1\x93\xac\xae\x89\x4d\x43\xbc\x8a\xc5\xf6\x43\x1c\x67\x97\x55\x70\x45\x8a\xa6\xb9\xf5\x7b\xfb\xe0\x32\xdd\x1e\xed\x13\xdf\xf3\xae\xc9\xfb\x8d\xef\x79\xb3\x6b\x36\xf9\xec\xc6\xf7\x42\x54\xd4\xb5\x74\xc1\xf4\xff\xdc\x58\x7d\xcc\xd4\xcd\xd5\xfb\xe5\x75\xbd\xd7\x3f\xda\x18\xf7\x83\xde\x8d\xea\xf5\xed\xb7\xcd\xf2\x15\x73\x6f\xad\xae\x74\xd5\x4d\xc2\xb5\x8a\x97\xab\x1b\xd7\x83\xeb\xc7\xf3\x29\xc8\x92\x28\x74\xf7\x98\x1a\x6b\x99\x2a\xbf\x1d\x5a\x0e\xe2\x65\x11\x47\x59\x1c\x47\xd1\x8d\x8a\xc2\x3b\xdf\xd3\x60\xf2\xc2\x05\xe1\xab\xf3\x7c\xad\xa6\x00\x80\xe6\xda\xfd\xbd\xbb\x4f\x9f\xbe\xb9\xba\x6b\x7f\x3b\xfe\xaf\x3d\x8b\x1e\x5a\xa1\x9f\x62\xe9\xb1\x32\x25\xce\x22\xa9\xdd\x32\x27\x36\x96\x38\xad\x89\xeb\x25\x71\x8c\x1e\x8d\x89\x4d\x4c\x9c\x67\xc4\x4d\x42\xbc\x4c\xa5\xbf\x92\x8a\x38\xab\xe5\x89\xba\x46\xfd\x57\xe8\xa5\x46\x7a\x3b\x6d\x88\xf3\x46\x70\x9b\x9c\x38\x46\x4f\xa5\xc4\x79\x2d\x3d\x06\xfc\x3a\x23\xae\x0a\xe2\xb4\x90\xfe\xc8\x8d\xe8\x94\xe8\x57\x4d\x5c\xa3\x87\xaa\x69\x6e\xd4\xd3\xcc\xb1\x82\x59\x4c\x9c\x30\x1b\xd0\xdf\x15\xec\x54\x62\x27\x8f\xa7\xfe\x2e\x05\x27\x5d\x12\x67\x39\xf1\x2a\x17\x8e\x66\x45\xbc\x84\x5c\x4a\x5c\x23\x2e\xc5\x43\x8c\x8c\x26\x8e\x34\xf1\x0a\xfd\x5c\x12\x97\x96\xd8\x4c\x67\xc8\xe5\x96\x38\x07\x4e\x2a\xf2\xb1\x21\x2e\x4a\xe2\x2a\x21\xce\x13\xe2\xa2\x26\x8e\x52\x91\xc5\x7c\xc2\x5c\xc2\xcc\x40\x8c\x1b\xdc\x59\xe2\xaa\x26\xd6\x2b\x89\x67\x84\x18\xae\x88\x6b\xd8\xcd\x64\x56\xc2\xb6\x46\xcc\x72\xf9\xe6\x62\x60\x88\x4d\x49\xac\x31\x2f\x8d\xcc\xad\xbc\x12\x79\xcc\xb6\x58\x13\x37\x98\xb5\x86\x38\xca\xc5\x46\x1e\x09\xf7\x62\x25\x3a\x90\x47\xce\xeb\x95\xf8\x5e\x02\x27\x12\x0c\xe4\x0c\xf1\x6e\x22\xc9\x87\xc5\xdc\x2a\xa4\x06\x4c\x21\xf6\x73\xc4\x73\xaa\x8d\x02\xdf\xc0\x3b\x95\x9a\x40\x4d\x41\xb7\x31\xc4\x29\x78\x55\x92\xeb\x64\xf9\x10\x87\x66\x25\xfc\x97\x89\xe4\xbd\x59\x0a\x17\xe4\x2f\x4b\x24\x97\x2b\xd8\x2a\x85\x8b\xa9\x24\x96\x98\xfd\xd9\x52\xf2\x07\xae\xa8\x1b\xb7\x5b\x96\x32\x93\x5d\x4d\x01\x3f\x96\xdc\xa7\xd8\x0d\x39\x71\x5d\x4c\x72\xf1\x54\xcb\xe0\x9b\x88\x6f\xc9\x94\x7f\xd4\x6b\x04\x7f\x26\x79\xd4\x8d\x8d\x25\x8e\xee\x9c\xc8\x1e\x02\xd7\x78\xaa\x3d\xf4\x08\xfa\x26\x6a\xa4\xb6\xe0\x17\x64\x51\xdf\xd8\x39\xd5\x54\xfb\xe8\x47\xd4\x74\x51\x4d\xbe\x23\x3e\xa9\xd8\x82\x5d\xec\x19\xf8\x88\x3d\x04\xee\xf0\x1b\x7b\x08\x35\xd2\x58\x89\x63\x1a\x8b\x6d\x3d\xed\x44\x57\x83\x8d\xd4\x0f\xf4\x60\x13\xfd\x59\x96\xd2\xb7\xf0\x11\xb5\x09\x3c\xe4\xb7\xc2\xce\xcc\x1e\xf0\xe0\x7b\x33\xd5\x71\x11\xc9\x8e\x8b\x2f\xb9\x2c\xa4\xa7\xb2\x95\x70\x46\x6e\xad\x91\xbb\x7c\x25\xf2\xa8\x63\xb7\x5b\xeb\x09\xdf\x0a\x5e\x1c\x4b\x2e\x31\x7f\xd0\x07\x98\x0d\xa8\x4b\xe0\x67\x53\x8e\xe2\x46\xf6\xa9\x2d\x85\x0f\x7a\x4d\x1b\x91\x45\x7f\x02\x0b\x3a\xa8\x3b\x60\xc2\x7e\x3e\xfd\x1b\xe2\x52\xcb\xb6\x91\x3e\xf9\x76\xcf\xa2\x8f\xc0\x55\x37\xc4\x49\x2e\x35\x15\xa5\xff\xd5\x9e\x75\x43\xf5\xcf\xdd\xb2\x0e\xf2\x87\x3b\x56\xfe\x7f\x7a\xfd\x86\x75\xa8\xd7\xec\xd7\xff\x04\x00\x00\xff\xff\x4f\x04\x38\x28\x00\x10\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 12288, mode: os.FileMode(420), modTime: time.Unix(1573546560, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1_create_table_consent_rule.down.sql":             _1_create_table_consent_ruleDownSql,
	"1_create_table_consent_rule.up.sql":               _1_create_table_consent_ruleUpSql,
	"2_alter_consent_record_add_version_uuid.down.sql": _2_alter_consent_record_add_version_uuidDownSql,
	"2_alter_consent_record_add_version_uuid.up.sql":   _2_alter_consent_record_add_version_uuidUpSql,
	"bindata.go": bindataGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"1_create_table_consent_rule.down.sql":             &bintree{_1_create_table_consent_ruleDownSql, map[string]*bintree{}},
	"1_create_table_consent_rule.up.sql":               &bintree{_1_create_table_consent_ruleUpSql, map[string]*bintree{}},
	"2_alter_consent_record_add_version_uuid.down.sql": &bintree{_2_alter_consent_record_add_version_uuidDownSql, map[string]*bintree{}},
	"2_alter_consent_record_add_version_uuid.up.sql":   &bintree{_2_alter_consent_record_add_version_uuidUpSql, map[string]*bintree{}},
	"bindata.go": &bintree{bindataGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
