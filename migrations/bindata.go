// Package migrations Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// 1_create_table_consent_rule.down.sql
// 1_create_table_consent_rule.up.sql
// bindata.go
package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1_create_table_consent_ruleDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\xf0\xf4\x73\x71\x8d\x50\x28\xcd\xcb\x2c\x8c\x2f\x4a\x2d\xce\x2f\x2d\x4a\x4e\xb5\xe6\x02\xcb\x84\x38\x3a\xf9\xb8\x2a\xa0\x09\xa2\x28\x4f\xce\x2f\x4a\x41\x51\x9c\x9c\x9f\x57\x9c\x9a\x57\x82\x2a\x85\xa4\xa5\x20\xb1\x24\x13\x24\x0f\x55\x87\xa2\x17\x43\x0e\x10\x00\x00\xff\xff\x55\xac\xed\x91\x9f\x00\x00\x00")

func _1_create_table_consent_ruleDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_create_table_consent_ruleDownSql,
		"1_create_table_consent_rule.down.sql",
	)
}

func _1_create_table_consent_ruleDownSql() (*asset, error) {
	bytes, err := _1_create_table_consent_ruleDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_create_table_consent_rule.down.sql", size: 159, mode: os.FileMode(420), modTime: time.Unix(1568619865, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1_create_table_consent_ruleUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x41\x4f\x83\x30\x14\xc7\xef\x7c\x8a\x77\x84\x84\x93\xc9\x4e\x3b\x55\x78\x9b\x44\xd6\x6a\x57\x8c\x3b\x35\x08\x5d\x86\x51\x3a\x4b\x31\xf1\xdb\x9b\x8d\xce\x31\xc0\x19\xcf\xfd\xbd\xf7\xfe\xff\x1f\x44\x1c\x89\x40\x10\xe4\x36\x45\xd8\xe7\xb6\x52\xb5\x95\x85\xae\x1b\x55\x5b\xf0\x3d\x00\x80\xaa\x84\x84\x0a\x5c\x22\x87\x07\x9e\xac\x08\xdf\xc0\x3d\x6e\x80\x64\x82\x25\x34\xe2\xb8\x42\x2a\xc2\x23\xd9\xb4\x2f\xaf\xaa\xb0\xf0\x44\x78\x74\x47\xb8\x7f\x33\x9b\x05\x40\x99\x00\x9a\xa5\x69\x87\x14\x6d\x63\x75\x59\xe5\xf5\x35\x28\x2f\xac\x36\xd3\x80\x17\xcc\x3d\xcf\x85\xce\x68\xf2\x98\x21\x24\x34\xc6\x67\x68\xeb\xea\x43\x0e\x0b\x30\x3a\xec\xe4\xbb\x8c\xe1\x39\x49\xd8\xdd\xeb\x2d\xee\x6c\xb8\x09\x69\x54\xa1\x4d\xf9\x6f\x19\x83\xc3\xb2\x37\xc9\x71\x81\x1c\x69\x84\xeb\x51\xbc\xaa\x0c\xba\xf1\xcf\xfc\xad\x2a\xe5\xd6\xe8\x77\x88\x0f\x99\x2e\x0d\x75\xaf\x56\x4f\xbd\xed\x8d\xd6\x5b\xb9\xcb\x9b\xdd\xb4\x42\xe7\xed\xba\x49\x57\x9a\xd1\x81\x06\xff\xbc\x7d\x24\xcc\xa8\x46\xb7\xa6\x50\x4e\xd5\xe5\x60\xaf\x7f\x17\xf3\x44\x4b\xfb\xb5\x57\xbf\xfd\x0d\x47\x72\xc1\x38\x26\x4b\x7a\x10\xed\x8f\x96\x06\x47\xa4\x67\x74\xf8\xd9\x4e\x08\xa3\x10\x63\x8a\x02\x21\x22\xeb\x88\xc4\x7f\x0a\x70\x65\x18\xfd\x89\x3a\xbe\x1e\x5e\xd6\x08\xe6\xde\x77\x00\x00\x00\xff\xff\xa7\x7b\x6f\x5b\x51\x03\x00\x00")

func _1_create_table_consent_ruleUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_create_table_consent_ruleUpSql,
		"1_create_table_consent_rule.up.sql",
	)
}

func _1_create_table_consent_ruleUpSql() (*asset, error) {
	bytes, err := _1_create_table_consent_ruleUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_create_table_consent_rule.up.sql", size: 849, mode: os.FileMode(420), modTime: time.Unix(1568619847, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _bindataGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\xdd\x6e\xdb\x48\xd2\xbd\x26\x9f\xa2\x47\xc0\x04\xe4\x07\x7f\x32\xff\x7f\x04\x18\x58\x4c\x92\x05\x72\xb1\x99\xc5\x26\x73\xb5\xb5\x30\x9a\x64\xb7\x43\xac\x2c\x2a\x24\x35\x29\x25\xf0\xbb\x2f\x4e\x17\x65\xcb\xc9\x8c\xe3\x9d\x9d\x0b\x59\x64\xab\xab\xea\x54\xd5\xa9\x53\xc9\xe5\xa5\xfa\xbb\x6e\xff\xad\x6f\x8c\xba\xed\x6f\x46\x3d\xf7\xc3\x6e\x52\x2f\x87\xce\xa8\x1b\xb3\x33\xa3\x9e\x4d\xa7\x9a\xa3\xba\x19\xfe\xbf\xe9\x77\x9d\x9e\xf5\x5a\x05\x7f\xb9\xff\x29\x54\xaf\x7e\x56\x6f\x7f\x7e\xaf\x5e\xbf\x7a\xf3\x7e\xed\x5f\x5e\xaa\x69\x38\x8c\xad\x99\x36\x78\x8e\xaf\xdb\xd1\xe8\xd9\x5c\xcf\xba\xd9\x9a\xeb\x76\xd8\x4d\x66\x37\x5f\x8f\x87\xad\x59\x77\xc3\xa7\xdd\x7a\xfa\xb8\xfd\xde\xbd\xc3\xfe\x74\xeb\x14\xff\x66\xf0\xf7\xdf\x40\xf6\xfd\xfe\x76\x3f\x8c\xb3\x0a\x7c\x6f\xd5\x1c\x67\x33\xad\x7c\x6f\xd5\x0e\xb7\xfb\xd1\x4c\xd3\xe5\xcd\xe7\x7e\x8f\x03\x7b\x3b\xe3\xab\x1f\xe4\xef\x65\x3f\x1c\xe6\x7e\x8b\x97\xc1\x19\xec\xf5\xfc\xe1\xd2\xf6\x5b\x83\x07\x1c\x4c\xf3\xd8\xef\x6e\xdc\x6f\x73\x7f\x6b\x56\x7e\xe8\xfb\xf6\xb0\x6b\x4f\x68\xfe\x61\x74\x17\xe0\x41\xfd\xf3\x5f\x08\x7b\xa1\x76\xfa\xd6\x28\x31\x0b\x55\x70\x3a\x35\xe3\x38\x8c\xa1\xfa\xe2\x7b\x37\x9f\xdd\x9b\xda\x5c\x29\xa0\x5a\xbf\x35\x9f\xe0\xc4\x8c\x81\x83\x8d\xf7\x9f\x0e\xd6\x9a\xd1\xb9\x0d\x43\xdf\xeb\xad\x33\xf8\xe1\x4a\xed\xfa\x2d\x5c\x78\xa3\x99\x0f\xe3\x0e\xaf\x17\xca\xde\xce\xeb\xd7\xf0\x6e\x83\x15\x1c\xa9\x1f\x3f\x6e\xd4\x8f\xbf\xae\x04\x89\x8b\x15\xfa\xde\x9d\xef\x7b\xbf\xea\x51\x35\x07\xab\x24\x8e\x04\xf1\xbd\x6b\x81\x73\xa5\xfa\x61\xfd\x72\xd8\x1f\x83\x17\xcd\xc1\x5e\xa8\x9b\xcf\xa1\xef\xb5\xdb\xd7\x27\xa4\xeb\x97\xdb\x61\x32\x41\xe8\xff\x59\x78\xe0\x46\xfc\xff\x8e\x23\x33\x8e\x82\x7b\x39\x6c\x0e\x76\xfd\x13\xa0\x07\xe1\x05\x6e\xf8\x77\xbe\x3f\x1f\xf7\x46\xe9\x69\x32\x33\x4a\x7e\x68\x67\x78\x71\xf9\x2d\xfd\xf0\xbd\x7e\x67\x07\xa5\x86\x69\xfd\xd7\x7e\x6b\xde\xec\xec\x70\x6f\xb7\xb4\xf0\x74\x7e\xe6\xc1\xf5\x50\xa9\xa5\x8d\xbe\x37\xf5\x9f\xdd\x7b\xbf\x9b\x8b\xcc\xf7\x6e\x31\x1e\xea\xde\xe9\xdf\x86\xce\xb8\xc3\xf7\xfd\xad\x51\xa0\xc9\x1a\x4f\x88\x73\x79\xa9\xde\xc2\xd7\x92\x02\x98\xe5\xca\x20\x1c\x0a\x6c\xff\x35\x88\xd0\xdd\x0f\xc2\x25\x34\xc0\xdc\xdb\xae\x9d\xa5\x78\x7d\x07\x44\xe7\x5e\x01\xf1\x09\xaf\xb8\x1f\x84\x92\xc0\x63\xa7\xce\x50\x9c\x22\x91\x47\x4e\x91\xe8\x13\x4e\x71\x3f\x08\xcf\xcb\xf0\xd8\xb5\x33\xff\x7d\xd7\xbd\x3d\xba\x6a\x3d\x1d\x01\xa5\x0c\xc2\x87\xb2\x7e\x13\xe2\xac\xd6\x6f\xa6\x57\xfd\xf8\x28\xcc\xa7\x0f\x66\xfe\x60\x46\xa5\x55\xd7\x8f\xa6\x9d\x87\xf1\xf8\x44\x38\x67\x1f\x84\xaa\x19\x86\xed\xb7\xa9\xbc\x18\xa6\x35\xf2\x40\x8c\x1f\xae\x54\x74\x6a\xc5\x71\x7a\x14\xb2\x9f\xd4\x74\x9c\xbe\x57\xbb\x77\xc7\x49\xfa\x61\x46\xab\x5b\xf3\xe5\xee\x2c\xde\x42\x6e\xcc\xeb\xf5\xf5\x13\xe2\xf8\x6a\xf8\xb4\x7b\xf7\x71\xab\xae\x16\xb2\x07\x2b\xe2\xd8\x12\x57\x0d\x71\x54\x11\x47\xd1\x6f\x7f\xac\x25\x2e\x13\xe2\xa8\x26\xb6\xf8\xb6\xc4\x39\xce\xf1\xc9\x88\xcb\x94\xb8\x8c\x89\xab\x4e\xce\x93\x8a\xb8\xed\x88\xdb\x86\x38\x69\x89\xab\x96\x38\xb1\xc4\x99\x26\x4e\x70\x6e\xe4\x1d\xcf\x38\xcb\x0c\x71\x93\x13\x9b\x82\x38\x4a\xc4\xae\xca\x88\xd3\x8a\x38\xd5\xc4\xb6\x26\x6e\x2a\xe2\x44\x13\xeb\x48\x70\xe8\x44\xe2\x64\xf6\xc1\x9f\xf3\x15\x13\xe7\x31\x71\xdd\x2e\x1f\x60\x2d\x97\x67\x2d\xcf\x55\x22\xbe\xaa\x9c\x58\x67\xc4\x3a\x27\x4e\x22\xe2\x26\x26\x4e\x32\xe2\x38\x95\x6f\x97\x67\x4e\x5c\x95\x12\x2f\x2e\x89\xb3\x94\x38\x32\xc4\xf1\x57\xf5\xb1\xcb\x5d\xdd\x12\x9b\x8e\xb8\x8e\x25\xf6\x43\x1d\x57\xa7\x55\xf0\x8c\x16\x2d\xba\xf5\x5b\xfb\xe0\xa4\x6e\x67\xfb\xc4\xf7\xbc\xe7\xf4\xfd\xc2\xf7\xbc\xd5\x73\x76\xec\xea\xc2\xf7\x42\x30\xea\xb9\x70\x81\xf4\xff\x9c\xac\x9e\x23\x75\xba\x7a\xbf\xbc\x9e\x9f\xf5\xf7\x36\xc6\xbd\xd0\x3b\xa9\xde\x5c\x7d\x3d\x2c\x5f\xa0\x7b\x1b\xf5\xcc\x54\x9d\x12\x6e\x54\x9c\xd7\x17\x6e\x06\x37\xe7\xfa\x14\x64\x49\x14\xba\x73\xa8\xc6\x46\x54\xe5\x97\x5d\xcf\x41\x9c\x17\x55\x11\xd7\x55\x91\x5f\xa8\x28\xbc\xf3\x3d\x0d\x24\x2f\x5c\x11\xbe\xb8\xcc\x37\x6a\x29\x00\x60\x6e\xdc\xdf\xbb\xfb\xf6\xe9\x8b\x67\x4f\xed\x2f\xfb\x3f\x3a\xb3\x75\x46\x5c\x27\x32\x13\x98\x93\x2a\x25\x4e\x23\xe2\x38\x23\x6e\x4b\x62\x83\xb9\xc6\x7c\x6a\xe2\xb2\x94\x99\xc3\xa7\x4e\x89\xdb\x5a\xe6\x32\x6d\x84\xd7\x65\x45\x5c\x37\xc4\x59\x46\xdc\x15\xc4\xc5\x69\x96\x5a\xb9\x93\xe6\x82\x27\xef\x88\xab\x42\x66\x10\xb3\x9b\xe1\xb7\x98\xd8\xc6\xc4\x5d\x23\x3e\xaa\x45\x03\x70\xde\x02\x4f\x4d\xdc\x62\x86\x3a\xe2\xa6\x23\xb6\x25\xb1\x35\x92\x03\x72\x45\xcc\x18\x38\x81\x29\x92\xd9\x33\xd0\x87\x82\x38\xcb\x89\xbb\x8a\xd8\x94\xc4\x0d\xe2\x26\xa2\x25\x75\xbe\xcc\x37\x66\x75\xc9\x21\x6f\x44\xb3\xd2\x4e\x6a\x54\x45\xc4\x5a\x3f\xe4\x1d\x21\x27\x68\x55\x22\x33\x1f\x41\x37\x8c\xcc\x34\x72\xeb\xac\xe0\x85\x7d\x61\xc4\xbe\xc8\x16\x3d\xc9\x89\xd3\x8c\xd8\x24\xa2\x55\xd9\xa2\x31\x2d\xbe\x53\xe2\x0e\x1a\x96\x89\x4e\x69\x2b\x71\x9b\x45\x43\x91\x1f\xea\x5b\x66\xc4\x59\x29\xf6\xa5\x25\x4e\x53\xa9\x57\x94\x4b\xde\x75\x2d\xb8\xa1\x63\xd0\xac\xa2\x16\x9c\xe8\x67\x01\x4c\xd0\x61\xe4\x59\x13\x9b\x9c\xd8\xe6\xd2\x17\xe8\xa4\x8b\xdb\x4a\xcd\xba\x54\xb0\x43\xcf\xda\x56\xf2\x41\xfd\x51\x2f\xf4\xa5\xa8\x44\xe7\x6b\xd8\x2d\x9a\x88\xdc\x5a\xf4\xbd\x94\xdf\x4d\x43\x6c\xf4\x83\x1e\x46\x8d\x70\x0b\x3d\x37\xad\xf4\xa7\x69\x84\x1f\x06\x5c\x40\xef\x6a\xe9\x55\xd7\x89\x3d\xf4\xdf\x20\x5e\x2b\x39\x43\xd7\x91\x53\x0e\x4d\x06\x67\x3b\xd1\xfe\xc2\x0a\x47\xc0\xdf\x36\x25\x6e\x12\xe2\xb4\x14\x8e\xba\xbd\x13\x0b\x3f\x5c\x3d\x32\xf1\x0d\xfe\x35\xad\xd4\x39\x82\x7f\x2d\x1c\x74\x3c\xc3\x79\x27\xfd\x41\x9d\xc0\x67\x53\x2d\x33\x50\x89\xee\xa3\xd6\x09\xf2\xea\xa4\xa6\xe8\x59\x5e\xc8\x1c\x81\xa3\xd0\x78\xf0\x18\xb6\xe0\x55\x53\xcb\xde\x42\xbf\x90\x1f\x7a\x0d\x0e\x80\x97\xb8\x8b\xf8\xc8\xdf\xed\x22\x4d\xdc\x2d\xb8\xa3\x42\x78\x0e\xac\x65\x27\xb5\x46\x4f\x34\x38\x54\x10\x37\xd8\x3d\x85\xec\x55\xcc\x63\x97\x0b\xe6\x22\x12\x4c\xe0\x09\xfa\x68\x53\xe1\x11\xe6\xcd\x36\x32\x03\x88\xd5\x2c\x73\x85\x3c\xc0\x2d\xec\xf1\x36\x96\xdd\x9a\x14\x72\xbf\xd4\xcb\x4c\x21\x27\xe4\x5e\x08\x2e\xdc\xc7\x7e\x44\xcf\xc1\x4d\x5b\x09\x8f\x81\x03\xf3\xa0\x53\xb1\x03\xef\xa0\x21\xd8\xdd\x8e\x2f\x89\xf4\x00\xb5\x6c\x33\xc1\x88\xd9\x2a\x71\x37\x27\x8e\x2b\xc1\x84\x79\x06\x5f\x1a\xcc\xa8\x21\xce\x8d\xd4\x13\xbe\xf1\x6f\x81\xce\x48\x4f\xbe\xd6\x35\x7c\x34\x30\x35\xc2\x8d\x7c\xe9\x77\x94\xfe\x57\xbb\xd6\x09\xeb\x9f\xbb\x69\x9d\xcb\xef\xee\x59\xf9\x3f\xea\xf3\xb7\xac\xf3\xfa\xbf\xee\xd8\xf3\x6c\xff\xf8\x86\xfd\x4f\x00\x00\x00\xff\xff\x1d\xf4\x7c\x40\x00\x10\x00\x00")

func bindataGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataGo,
		"bindata.go",
	)
}

func bindataGo() (*asset, error) {
	bytes, err := bindataGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bindata.go", size: 8192, mode: os.FileMode(420), modTime: time.Unix(1568619878, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1_create_table_consent_rule.down.sql": _1_create_table_consent_ruleDownSql,
	"1_create_table_consent_rule.up.sql":   _1_create_table_consent_ruleUpSql,
	"bindata.go":                           bindataGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"1_create_table_consent_rule.down.sql": &bintree{_1_create_table_consent_ruleDownSql, map[string]*bintree{}},
	"1_create_table_consent_rule.up.sql":   &bintree{_1_create_table_consent_ruleUpSql, map[string]*bintree{}},
	"bindata.go":                           &bintree{bindataGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
