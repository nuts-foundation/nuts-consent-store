// Package generated provides primitives to interact the openapi HTTP API.
//
// This is an autogenerated file, any edits which you make here will be lost!
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"strings"
)

// ConsentCheckRequest defines component schema for ConsentCheckRequest.
type ConsentCheckRequest struct {
	Actor        Identifier `json:"actor"`
	Custodian    Identifier `json:"custodian"`
	ResourceType string     `json:"resourceType"`
	Subject      Identifier `json:"subject"`
}

// ConsentCheckResponse defines component schema for ConsentCheckResponse.
type ConsentCheckResponse struct {
	ConsentGiven *string `json:"consentGiven,omitempty"`
	Limitations  *string `json:"limitations,omitempty"`
}

// ConsentQueryRequest defines component schema for ConsentQueryRequest.
type ConsentQueryRequest struct {
	Actor Identifier      `json:"actor"`
	Page  *PageDefinition `json:"page,omitempty"`
	Query interface{}     `json:"query"`
}

// ConsentQueryResponse defines component schema for ConsentQueryResponse.
type ConsentQueryResponse struct {
	Page         PageDefinition      `json:"page"`
	Results      []SimplifiedConsent `json:"results"`
	TotalResults int32               `json:"totalResults"`
}

// Identifier defines component schema for Identifier.
type Identifier string

// PageDefinition defines component schema for PageDefinition.
type PageDefinition struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

// SimplifiedConsent defines component schema for SimplifiedConsent.
type SimplifiedConsent struct {
	Actors    []Identifier `json:"actors"`
	Custodian Identifier   `json:"custodian"`
	Resources []string     `json:"resources"`
	Subject   Identifier   `json:"subject"`
}

// SubjectQuery defines component schema for SubjectQuery.
type SubjectQuery string

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new consent record (POST /consent)
	CreateConsent(ctx echo.Context) error
	// Send a request for checking if the given combination exists (POST /consent/check)
	CheckConsent(ctx echo.Context) error
	// Do a query for available consent (POST /consent/query)
	QueryConsent(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateConsent converts echo context to params.
func (w *ServerInterfaceWrapper) CreateConsent(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateConsent(ctx)
	return err
}

// CheckConsent converts echo context to params.
func (w *ServerInterfaceWrapper) CheckConsent(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CheckConsent(ctx)
	return err
}

// QueryConsent converts echo context to params.
func (w *ServerInterfaceWrapper) QueryConsent(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QueryConsent(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/consent", wrapper.CreateConsent)
	router.POST("/consent/check", wrapper.CheckConsent)
	router.POST("/consent/query", wrapper.QueryConsent)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RXW4/bNhP9KwN+H9A2IGQ7G+QiYB+STbvZNl1v15unJAhocmQzpUiFpJwYgf97MZTk",
	"m9Tc0+zDwjZHwzNnzlz0nklXVs6ijYHl71mQSyxF+njmbEAbz5Yo/77GNzWGSD9X3lXoo8ZkJGR0nj78",
	"32PBcva/0c7fqHU2ulBooy40erbhTNYhOqWF/bzHPAZXe4k36wrpSYVBel1F7SzL2W9PLq6hM4G4FBF0",
	"AN/ARsU4w3eirAyynE3nAf1KpCc5i8kfC9Fru6CLQj1/jTJ+DroE702tPSqWP9962I+Vt1QdBfJyw4+I",
	"DhV97TMtG6tzvcLEHNq6pMvWGBhn1jHOjC41BftyIKp0lmIOffYK56GoY+0R6oCHZFmzhhJFqD2WRAAI",
	"jyCMcW9RcZhNf70C62KfyCNOXB2lKw8C/qtGv/6WyqrEAj/2xJVY4GMstNUp9g1nbwgGPeYsTguWP/+w",
	"g1mT3ASebfin43t5TEkniAZAn5h/U8KXhekx1KYpch2xDB/zMNNlZQi6alGRkzbHwnuxTt9dFOZ65/lQ",
	"Vjd0CrYu5+jBFdBB2PrRNuJioIBShDvIR/cQU3vE9q49R4teS9BbG1K1AlK5x8ojRaPtAh7NLjmIxVw6",
	"hRwwygwu4k8BhHkr1gGo4qKvZUQFIoCw8Oz6EgrXaB/maxCgXD03CNIZZ+Hn/BcQVkFcoqV/HYI1XbYS",
	"pkZigQ4WVMXk7oU9qLZbUHubO63y29nkbnb/zjibZJPJyf37J9nt7E52NzvJH7R/4xf24+aTfNz83eus",
	"bR1DjlZVTtuYt12lO9QYi9wXMp/cu/cgn55eohIVh+mz0ycoTFxK4ZHD2enlUw6zm9NzNAq9EVZxeHp6",
	"7h1a4zicXZ7SLa+k80q8UrhC4ypqHq+Mk8IMNd0jvfY0n9oXfThWDmeuKAIOnh23oMaw7YVJRn2R99S0",
	"M4GWLPBIkTE+1LE+vcAOe9dxZX3llByoxofkmgRYLLWHnSHfwe2l5RjV18/GlqTD0bgPprsipWe/1/Zn",
	"vkeEiO8iBBReLlOBF9oqKrfWTTgorz89/C5swFsD42rDmbaFG+Dt6gJChVIXWqYBmu7ptECrhJYYQKyE",
	"NoKagYhA8t+ZROcxg5slwmXvd1hSawElopiLkBqEQunXFXWdNn4OZx1ZHB4SgRyuu11HunKubTPZ6RId",
	"mukcEswVWuX8Fj8Yt9ASooM0dFK3krR3JOOtVYswS93JaIntHLKiJM7Or56uTpI8dEy8DoRFvhhnK/Sh",
	"oZFa0zjVa4VWVJrl7CQbZ2MqIxGXSX8juavCyjVbAVVYiu5CsZxJjyJiV6yNtDDER06t2yUpts+LqjJt",
	"wkavQ9NTGn1+weQ7VHH0NTa1liZ0gn57POlL5yyhVdBZUvh3xuMjpCThUWWEbva6rVpLHcJuclCCuo1h",
	"F8eAig8hXNiVMFp1q3Cqx1CXpaCKagGCAItv++0tikWgmu2ykjaYLkejpJsPZIqOv2+iht5QPilV4+8E",
	"octyPw3TP7Yi4DB3ag1LZ1SAdi1utqM2gq/TyO7l45upZIZWgegOm/ZHAdPFen+h2etFgO90aHa3D6po",
	"u30Pqygd/ycqOngb+TEqOtz7f6iKvnmneexAtEMn+d9OS7lN7oBQNpt/AgAA//9pvhAroRAAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

